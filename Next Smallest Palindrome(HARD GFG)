class Solution{
public:
	vector<int> generateNextPalindrome(int a[], int n) {
	    vector<int>v;
	    int k1=0;
	    int k2=0;
	    int s;
	    int e;
	    int mid=n/2;
	    if(n%2==0)
	    {
	       s=mid-1;
	       e=mid;
	    }
	    else
	    {
	        s=mid-1;
	        e=mid+1;
	    }
	    int k3=0;//if all same digits
	    int sm=a[0];
	    for(int i=1;i<n;i++)
	    {
	        if(sm!=a[i])
	        {
	            k3++;
	        }
	    }
	    while(s>-1&&e<n)
	    {
	        if(a[s]>a[e])//Case where no addition req just copy digits before mid to after mid position
	        {
	            k1++;
	            break;
	        }
	        if(a[s]<a[e])//Case where addition is required to digits
	        {
	            k2++;
	            break;
	        }
	        s--;
	        e++;
	    }
	    if(k3==0)//Cases of all digits same
	    {
	        if(a[0]==9&&n!=1)
	        {
	       v.push_back(1);
              for(int i=1;i<=n-1;i++)
              {
                  v.push_back(0);
              }
              v.push_back(1);
              return v;
	        }
	        else if(a[0]==9&&n==1)
	        {
	           v.push_back(1);
	           v.push_back(1);
	           return v;
	        }
	        else
	        {
	            for(int i=0;i<n;i++)
	            {
	                int jj=a[i]+1;
	                v.push_back(jj);
	            }
	            return v;
	        }
	        
	    }
	    else if(k1!=0)// When no addition on any digit required
	    {
	        int j=n-1,i=0;
	        while(j>i)
	        {
	            a[j]=a[i];
	            i++;
	            j--;
	        }
	    }
	    else//Need to update digits 
	    {
	       if(n%2==0)
	       {
	           mid=mid-1;
	       }
          while(mid>-1&&a[mid]+1>9)
          {
              a[mid]=0;
              mid--;
          }

              a[mid]=a[mid]+1;
              for(int i=0;i<n/2;i++)
              {
                 a[n-i-1]=a[i]; 
              }
          
	    }
	 for(int i=0;i<n;i++)
	 {
	     v.push_back(a[i]);
	     
	 }
	 return v;
	}

};
